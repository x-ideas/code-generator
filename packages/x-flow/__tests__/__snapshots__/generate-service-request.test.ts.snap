// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`测试generate-service-request code 3610119 get 非数组/CommonResponse void 1`] = `
"export interface IFDemoRequestQueryParamsObject {
  /**
   * 城市编码
   */
  areaZip: number;
}

export interface IBDemoRequestQueryParamsObject {
  /**
   * 城市编码
   */
  area_zip: number;
}

export async function getDemoRequest(replenishId: string, queryParams: IFDemoRequestQueryParamsObject): Promise<ICommonResponse<void>> {
  const result = await http.get<ICommonResponse<unknown>>(microservice.javaAdmin + \`/admin/depot/replenish/export_store_list/\${replenishId}\`, {
    params: toBIFDemoRequestQueryParamsObjectAdaptor(queryParams),
  });

  if (isRequestSucceed(result)) {
    return result.data;
  } else {
    return Promise.reject(new Error(\`请求失败:(\${result?.data?.errmsg || '未知原因'})\`));
  }
}
"
`;

exports[`测试generate-service-request code 3610401 get 数组/ ListResponse  1`] = `
"export interface IFDemoRequestQueryParamsObject {
  /**
   * 需求单号
   */
  applyNo?: string;
  /**
   * 第几页(0..N)
   */
  page: number;
  /**
   * 每页大小
   */
  size: number;
  /**
   * 排序，格式: property(,asc|desc). 默认升序.
   */
  sort?: string[];
  /**
   * 状态,-1=全部，1=草稿，10=待发送，20=待发货，30=待收货，40=到货中，50=已完成 ，120=未完成  200=删除
   */
  status?: number;
  /**
   * 门店id
   */
  storeId?: string;
  /**
   * 创建时间开始
   */
  timeCreateFrom?: number;
  /**
   * 创建时间结束
   */
  timeCreateTo?: number;
}

export interface IBDemoRequestQueryParamsObject {
  /**
   * 需求单号
   */
  applyNo?: string;
  /**
   * 第几页(0..N)
   */
  page: number;
  /**
   * 每页大小
   */
  size: number;
  /**
   * 排序，格式: property(,asc|desc). 默认升序.
   */
  sort?: string[];
  /**
   * 状态,-1=全部，1=草稿，10=待发送，20=待发货，30=待收货，40=到货中，50=已完成 ，120=未完成  200=删除
   */
  status?: number;
  /**
   * 门店id
   */
  storeId?: string;
  /**
   * 创建时间开始
   */
  timeCreateFrom?: number;
  /**
   * 创建时间结束
   */
  timeCreateTo?: number;
}

export async function getDemoRequest(queryParams: IFDemoRequestQueryParamsObject): Promise<IListResponse<void[]>> {
  const result = await http.get<IListResponse<unknown[]>>(microservice.javaAdmin + \`/admin/depot/apply\`, {
    params: toBIFDemoRequestQueryParamsObjectAdaptor(queryParams),
  });

  if (isRequestSucceed(result)) {
    return result.data;
  } else {
    return Promise.reject(new Error(\`请求失败:(\${result?.data?.errmsg || '未知原因'})\`));
  }
}
"
`;

exports[`测试generate-service-request code 3610404 put CommonResponse 1`] = `
"export interface IFDemoRequestBodyParamsObject {
  /**
   * list
   */
  list?: IFList[];
}

/**
 * 补货需求单补货数
 */
export interface IFList {
  /**
   * 商品id
   */
  productId?: string;
  /**
   * 补货数
   */
  replenishCount?: number;
}

export interface IBDemoRequestBodyParamsObject {
  /**
   * list
   */
  list?: IBList[];
}

/**
 * 补货需求单补货数
 */
export interface IBList {
  /**
   * 商品id
   */
  product_id?: string;
  /**
   * 补货数
   */
  replenish_count?: number;
}

export async function updateDemoRequest(id: string, bodyParams: IFDemoRequestBodyParamsObject): Promise<ICommonResponse<void>> {
  const result = await http.put<ICommonResponse<unknown>>(
    microservice.javaAdmin + \`/admin/depot/apply/\${id}\`,
    toBIFDemoRequestBodyParamsObjectAdaptor(bodyParams)
  );

  if (isRequestSucceed(result)) {
    return result.data;
  } else {
    return Promise.reject(new Error(\`请求失败:(\${result?.data?.errmsg || '未知原因'})\`));
  }
}
"
`;

exports[`测试generate-service-request code 3610412 get 数组/CommonResponse 1`] = `
"export async function getDemoRequest(detailId: string): Promise<ICommonResponse<void[]>> {
  const result = await http.get<ICommonResponse<unknown[]>>(microservice.javaAdmin + \`/admin/depot/apply/logs/\${detailId}\`);

  if (isRequestSucceed(result)) {
    return result.data;
  } else {
    return Promise.reject(new Error(\`请求失败:(\${result?.data?.errmsg || '未知原因'})\`));
  }
}
"
`;
